import { __assign } from "tslib";
import { getResolvedHostname } from "./getResolvedHostname";
import { getResolvedPartition } from "./getResolvedPartition";
import { getResolvedSigningRegion } from "./getResolvedSigningRegion";
export var getRegionInfo = function (region, _a) {
    var _b, _c, _d, _e, _f, _g;
    var signingService = _a.signingService, regionHash = _a.regionHash, partitionHash = _a.partitionHash;
    var partition = getResolvedPartition(region, { partitionHash: partitionHash });
    var resolvedRegion = (_c = (_b = partitionHash[partition]) === null || _b === void 0 ? void 0 : _b.endpoint) !== null && _c !== void 0 ? _c : region;
    var hostname = getResolvedHostname(resolvedRegion, {
        signingService: signingService,
        regionHostname: (_d = regionHash[resolvedRegion]) === null || _d === void 0 ? void 0 : _d.hostname,
        partitionHostname: (_e = partitionHash[partition]) === null || _e === void 0 ? void 0 : _e.hostname,
    });
    var signingRegion = getResolvedSigningRegion(region, {
        hostname: hostname,
        signingRegion: (_f = regionHash[resolvedRegion]) === null || _f === void 0 ? void 0 : _f.signingRegion,
        regionRegex: partitionHash[partition].regionRegex,
    });
    return __assign(__assign({ partition: partition, signingService: signingService, hostname: hostname }, (signingRegion && { signingRegion: signingRegion })), (((_g = regionHash[resolvedRegion]) === null || _g === void 0 ? void 0 : _g.signingService) && {
        signingService: regionHash[resolvedRegion].signingService,
    }));
};
